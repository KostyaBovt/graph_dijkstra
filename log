diff --git a/app.css b/app.css
index 80969c9..2cfb000 100644
--- a/app.css
+++ b/app.css
@@ -1,34 +1,41 @@
 .nodes circle {
+  fill: #42abd1;
   stroke: #fff;
   stroke-width: 1.5px;
 }
 
+.nodes g.highlight circle:hover {
+  fill: #ff7c7c;
+}
+
+.nodes g.selected circle {
+  fill: #ff0000;
+}
+
 .nodes g.start-node circle {
   stroke: #ad0000;
-  stroke-width: 1.5px;
 }
 
 .nodes g.end-node circle {
   stroke: #ad0000;
-  stroke-width: 1.5px;
 }
 
-.nodes g.selected-1 circle {
+.nodes g.path-1 circle {
   stroke: #1B3409;
 }
-.nodes g.selected-2 circle {
+.nodes g.path-2 circle {
   stroke: #609B36;
 }
-.nodes g.selected-3 circle {
+.nodes g.path-3 circle {
   stroke: #BAE326;
 }
-.nodes g.selected-4 circle {
+.nodes g.path-4 circle {
   stroke: #F9F901;
 }
-.nodes g.selected-5 circle {
+.nodes g.path-5 circle {
   stroke: #F5F5A3;
 }
-.nodes g.selected-n circle {
+.nodes g.path-n circle {
   stroke: #ffd1d1;
 }
 
@@ -37,36 +44,49 @@ line {
   stroke-width: 0.7px;
 }
 
-line.selected-1, line.selected-2, line.selected-3,  line.selected-4,  line.selected-5, line.selected-n {
+line.highlight {
+  stroke-width: 3px;
+}
+
+line.path-1.highlight, line.path-2.highlight, line.path-3.highlight,  line.path-4.highlight,  line.path-5.highlight, line.path-n.highlight {
+  stroke-width: 3px;
+}
+
+line.highlight:hover {
+  stroke-width: 4px;
+  stroke: #ff7c7c;
+}
+
+line.path-1, line.path-2, line.path-3,  line.path-4,  line.path-5, line.path-n {
   stroke-width: 1.8px;
 }
 
-line.selected-1 {
+line.path-1 {
   stroke: #1B3409;
   /*stroke-dasharray: 0.1%;*/
 }
 
-line.selected-2 {
+line.path-2 {
   stroke: #609B36;
   /*stroke-dasharray: 0.3%;*/
 }
 
-line.selected-3 {
+line.path-3 {
   stroke: #BAE326;
   /*stroke-dasharray: 0.5%;*/
 }
 
-line.selected-4 {
+line.path-4 {
   stroke: #F9F901;
   /*stroke-dasharray: 0.7%;*/
 }
 
-line.selected-5 {
+line.path-5 {
   stroke: #F5F5A3;
   /*stroke-dasharray: 0.9%;*/
 }
 
-line.selected-n {
+line.path-n {
   stroke: #ffd1d1;
   /*stroke-dasharray: 0.9%;*/
 }
diff --git a/graph.js b/graph.js
index 1b00b1d..56bd4fe 100644
--- a/graph.js
+++ b/graph.js
@@ -8,6 +8,7 @@ class Graph {
 			this.initLinks();
 			this.initNodes();
 			this.initSimulation();
+			this.initEventsEnvironment();
 			this.pathFinder = null;
 
 			// setTimeout(() => {
@@ -34,6 +35,58 @@ class Graph {
 
 	}
 
+	keydown() {
+		if (this.keyDown != -1) {
+			return;
+		}
+		this.keyDown = d3.event.keyCode;
+		console.log("KEY DOWN: " + this.keyDown);
+
+		switch (d3.event.keyCode) {
+			case 17:
+				this.highlightAll();
+				break;
+		}	
+	}
+
+	highlightAll() {
+		this.links
+			.classed("highlight", true);
+		this.nodes
+			.classed("highlight", true);
+	}
+
+	unHighlightAll() {
+		this.links
+			.classed("highlight", false)
+		this.nodes
+			.classed("highlight", false)
+	}
+
+	keyup() {
+		if (this.keyDown != d3.event.keyCode) {
+			return;
+		}
+		console.log("KEY UP " + this.keyDown);
+		this.keyDown = -1;
+
+		switch (d3.event.keyCode) {
+			case 17:
+				this.unHighlightAll();
+				break;
+		}
+
+	}
+
+	initEventsEnvironment() {
+		this.keyDown = -1;
+
+		d3.select(window)
+			.on('keydown', () => {this.keydown()})
+			.on('keyup', () => {this.keyup()});
+
+	}
+
 	deleteNode(id) {
 		if (this.firstSelectedNode == id || this.lastSelectedNode == id) {
 			d3.selectAll(".nodes .start-node").classed("start-node", false);
@@ -212,6 +265,7 @@ class Graph {
 
 		this.firstSelectedNode = null;
 		this.lastSelectedNode = null;
+		this.selection = {nodes: new Set(), links: new Set()};
 	}
 
 	initLinks() {
@@ -247,6 +301,12 @@ class Graph {
 		}
 	}
 
+	updateSelection(selectionType, d, element) {
+		if (this.selection[selectionType].has(d.id)) {
+			
+		}
+	}
+
 	initNodes() {
 		var that = this;
 		var selection = this.svg.select(".nodes")
@@ -257,13 +317,18 @@ class Graph {
 			.enter().append("g")
 			.attr("id", (d) => "n" + d.id)
 			.on("click", function(d) {
-				that.selectNode(d, this);
-				that.findPaths();
+				if (that.keyDown == 17) {
+					console.log(this);
+					console.log(d);
+					that.updateSelection("nodes", d, this)
+				} else {
+					that.selectStartEndNode(d, this);
+					that.findPaths();
+				}
 			});
 
 		newNodes.append("circle")
 			.attr("r", 7)
-			.attr("fill", "#6ba3ff")
 			.call(d3.drag()
 				.on("start", (d) => this.dragstarted(d))
 				.on("drag", (d) => this.dragged(d))
@@ -354,13 +419,13 @@ class Graph {
 				var min = Math.min(foundPath[i], foundPath[i + 1]);
 				var max = Math.max(foundPath[i], foundPath[i + 1]);
 				var id = "#n" + min + "-n" + max;
-				var sclass = "selected-" + ((num >= 5) ? "n" : (num + 1));
+				var sclass = "path-" + ((num >= 5) ? "n" : (num + 1));
 				this.svg.select(id).classed(sclass, true);
 
 				//color nodes
 				if (i) {
 					var id = "#n" + foundPath[i];
-					var sclass = "selected-" + ((num >= 5) ? "n" : (num + 1));
+					var sclass = "path-" + ((num >= 5) ? "n" : (num + 1));
 					this.svg.select(id).classed(sclass, true);
 				}
 			}
@@ -371,18 +436,18 @@ class Graph {
 		var selectorArray = this.generateSelectorArray();
 		// uncolor links
 		selectorArray.forEach((selector) => {
-			var sclass = "selected-" + selector;
+			var sclass = "path-" + selector;
 			this.svg.selectAll("line." + sclass).classed(sclass, false);		
 		})
 
 		// uncolor nodes
 		selectorArray.forEach((selector) => {
-			var sclass = "selected-" + selector;
+			var sclass = "path-" + selector;
 			this.svg.selectAll(".nodes ." + sclass).classed(sclass, false);
 		})
 	}
 
-	selectNode(d, node) {
+	selectStartEndNode(d, node) {
 		if (d3.select(node).classed("end-node")) {
 			return;
 		}
